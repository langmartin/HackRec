#+TITLE:     hackrec 1 Schedule
#+AUTHOR:    Lang Martin
#+EMAIL:     lang.martin@gmail.com
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+COLUMNS:   %20ITEM(Class) %12SCHEDULED(Date)

* 00 Introduction
SCHEDULED: <2011-11-07 Mon>

* 01 SICP 1.1.1
SCHEDULED: <2011-11-14 Mon>

* 02 SICP 1.1.1 and string-reverse
SCHEDULED: <2011-11-21 Mon>

We discussed string-reverse in class, but sadly (?) I hadn't started
keeping the code yet. It is lost forever.

* 03 CS61A Lectures 1-3
SCHEDULED: <2011-12-05 Mon>

Introduced [[file:sentences.scm][sentences]].
In class, we did reverse (for sentences and words) both recursively
and iteratively.

* 04 SICP 1.2.1-2
SCHEDULED: <2011-12-12 Mon>

Fibonacci, recursively and iteratively.

* 05 SICP 1.2.3
SCHEDULED: <2011-12-19 Mon>

** Exercise 1.12
Pascal's triangle and algorithmic growth. Our solution in class
was kind of weird, we were supposed to come up with a purely
numeric approach that grew in both directions. I used sentences to
simplify the problem, so our version is faster than the intended
solution. The intended solution is this one:
http://community.schemewiki.org/?sicp-ex-1.12

* 06 SICP 1.2.3
SCHEDULED: <2011-12-27 Tue>

** Exercise 1.14
The count-change procedure and algorithmic growth.

A couple of comments on figuring out the O growth for this
function:

    1) I did it incorrectly the first time, don't get discouraged.
    2) It's important to understand the common growth patterns, n,
       n^2, log n and n log n, but it's ok to let the details slip.
    3) The function on each input number to figure out how many
       pennies should be returned, on n/5 for nickles, n/10 for dimes,
       etc.

* 07 SICP 1.2.4
SCHEDULED: <2012-01-09 Mon>

fast-exponent and fast-multiply.
http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.4

This section is interesting because we solve the problem two
different ways (twice), and the second way takes fewer steps.

** Exercise 1.16

** Exercise 1.17
See the bottom of [[file:06-count-change.scm][06-count-change.scm]], we started discussing this
at the end of class 6.

** Exercise 1.18
Hint:
    : (= (* 2 100) (* 4 50))

* O8 SICP 1.2.5-6
SCHEDULED: <2012-01-16 Mon>

Finding Primes and Fermat's little theorem.

** Section 1.2.5
*** Exercise 1.20
Normal order has consequences.

** Section 1.2.6
*** Exercise 1.21
Just getting setup for working through the rest of the exercises.

*** Exercise 1.25
We cheated a bit here by adding (display ".") to the top of the
looping procedures. It prints a dot into the repl every time the
function goes around so that we can count iterations.

*** Exercise 1.26
Compare the two functions side by side.

* 09 SICP 1.3.1
SCHEDULED: <2012-01-23 Mon>

** Exercise 1.30
In our example code, we went back and edited =sum= into =sum%=, with
additional parameters for an operation and a seed value. This turns
out to be the same we were asked to do for 1.32, but I didn't read
ahead carefully enough.

** Exercise 1.31
The pi4 procedure can get a bit complicated. Hint:

#+begin_src scheme
  (= (* 2/3
        4/3)
     (/ (* 2 4)
        (* 3 3)))
#+end_src

Use =a= to indicate the number of iterations rather than the value of
the specific terms.

** Exercise 1.32
1.30, with a couple of extra holes poked in it.

** Exercise 1.33
Check the value of filter before choosing how to iterate.

* 10 SICP 1.3.2-3
SCHEDULED: <2012-01-30 Mon>

** 1.3.2
*** Exercise 1.34

Step through the substitution as though =g= were any regular
parameter. It might be helpful to say "apply procedure" to yourself
when you see an open paren.

** 1.3.3

This section is real math heavy even by the fairly generous standards
that we've been using, so read through it but don't get too bogged
down in the math.

*** Exercise 1.36

This refers to using display and newline to see what's going on from
back in Exercise 1.22, which we skipped. Sorry about that. We've
talked about it in class, though.

* 11 SICP 1.3.4
SCHEDULED: <2012-02-06 Mon>

The Newton's method example uses some light calculus, but they define
all the bits that you need for you right in the chapter. The
definition for deriv is pretty cool if you recall what a derivative
is.

** Exercise 1.40

Not as weird as it looks, cubic should return a procedure that takes
the one argument =x= and that procedure should perform the equation
they listed.

** Exercise 1.41

We handwaved at the actual expansion of all the doubling; notice that
double is mostly doubling itself, so that we've built a tree of
repeating function calls before we throw =inc= in as the function to
repeat.

** Exercise 1.42

I opined that in most of cases, =compose= is less clear to read than
the writing a new procedure body because the procedure body uses the
universal language of scheme's procedure appliction to make clear what
happens in what order.

** Exercise 1.43

I realized that I was too hasty, because it would be difficult to
write =repeated= without =compose=. With =compose=, it's just like any
other recursive function.

** Exercise 1.44

Jacob and I both made the same mistake (labeled "wrong" in the file).
After getting the procedure =(smooth f)=, we repeated it =n= times.
The correct answer repeats =smooth= itself and provides =f= after all
the smooth procedures are set to operate on the results of each other.

** Optional 1.45

This looks like it will take a lot of time, so don't worry about it if
you don't get to it. We didn't cover this in class.

** Optional 1.46

Also lots of time. Also ignored.

* 12 SICP 2.1.1-3
SCHEDULED: <2012-02-13 Mon>

Woooo, chapter two! I think we should try for the first three
sections, this material is a little easier than the last couple of
sections have been. Section 2.1.3 is a little trickier, and also is
very cool.

** Exercise 2.1

The first definition in the file is Jacob's, the second is from the
solutions website. The solutions answer takes advantage of the way the
negative sign propagates through division, walk through the
substitution model with =n= and =d= of all four combinations of signs
to verify it.

** Exercise 2.2

The only thing I added to the obvious solution here is that =cons= is
already a procedure that takes two values and combines them into one
new value; you don't need to wrap a new procedure around a call to
cons.

Jacob's fancy =avg= uses the syntax we haven't learned yet for
procedures of any number of arguments.

** Exercise 2.3

The first definition of =len= use =car= and =cdr= directly, which
breaks the abstraction. The second bits, =len-dimen= and =len= are my
attempt to allow preserve the layers of abstraction while writing
something sensibly short to abstract length. Once we have length
defined, =perimeter= and =area= are pretty simple.

Also, =(caar x)= is a shortcut for =(car (car x))=.

** Exercise 2.4

To be continued.

* 13 SICP 2.1.3+
SCHEDULED: <2012-02-27 Mon>

** Section 2.1.3
*** Exercise 2.4

Peek at the notes from class 12 if you like.

*** Exercise 2.5

Any positive power of 2 is even, and any positive power of 3 is odd.
This is a bad hint, sorry. Think about where the car was stored; look
for the largest denominator that's a power of 2.

*** Exercise 2.6

Don't spend way too much time on this, it's cool but not critical to
your education. Try just doing copy and paste to add-1 to zero, but
then trace that through and reduce the definition of one. Reduce two
the same way, it clarifies the idea a lot.

From the solutions site:

: If you wonder how to use these functions here are few examples..
: ((one square) 2)
: ((two square) 2)
: (((add two one) square) 2)

We just went over my solution in [[./student/lang/church.scm]], there's no
code in the work file for this exercise.

** Skip Section 2.1.4

This is an extended exercise which is interesting abstraction
practice, and does involve some nice specific cases. It's also a lot
of math, and everything will still make sense moving forward.

* 14 SICP 2.2.1
SCHEDULED: <2012-03-12 Mon>

** Section 2.2.1
*** Exercise 2.17

We talked about the "named let" form in class, and the source file
contains a =last-pair= that uses a named let to create an internal
define. You don't need any of that, the inner recursive definition is
correct.

*** Exercise 2.18

The first =reverse= is Jacob's, which is inefficient because
=last-pair= and =butlast= both traverse the entire list (and =butlast=
builds a new one). The second =reverse= is iterative, and demonstrates
that iteration is always "backwards" as it traverses lists.

*** Exercise 2.19

Yay for long data names.

*** Exercise 2.20

In which we finally learn how to define Jacob's fancy =avg= procedure.
The solution given is Jacob's.

*** Exercise 2.21

*** Exercise 2.22

Think back to the solution for =reverse=.

*** Exercise 2.23

Jacob used =and= in his definition of =for-each=, which works but will
stop running if any application of =proc= return false. The =begin=
form throws away the first result and calls the second
unconditionally.
